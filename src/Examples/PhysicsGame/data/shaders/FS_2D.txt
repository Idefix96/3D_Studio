#version 440

in vec2 UV_FS;
in vec3 Normal_FS;
in vec3 Pos_FS;
in vec3 Tangent_FS;
in mat4 WorldToCamera_FS;

out vec4 FragColor;

uniform sampler2D Sampler;
uniform sampler2D Normalmap;
uniform vec3 AmbCol;
uniform float AmbInt;
uniform vec3 DirCol;
uniform float DirInt;
uniform vec3 Dir;
uniform vec3 EyePos;
uniform float SpecularIntensity;
uniform float SpecularPower;
uniform vec3 MeshColor;
uniform float HasTexture;
uniform float HasNormalMap;

vec3 CalcBumpedNormal()
{
    vec3 Normal = normalize(Normal_FS);
    vec3 Tangent = normalize(Tangent_FS);
    Tangent = normalize(Tangent - dot(Tangent, Normal) * Normal);
    vec3 Bitangent = cross(Tangent, Normal);
    vec3 BumpMapNormal = texture(Normalmap, UV_FS).xyz;
    BumpMapNormal = 2.0 * BumpMapNormal - vec3(1.0, 1.0, 1.0);
    vec3 NewNormal;
    mat3 TBN = mat3(Tangent, Bitangent, Normal);
    NewNormal = TBN * BumpMapNormal;
    NewNormal = normalize(NewNormal);
    return NewNormal;
}

void main()
{
	
	{
		FragColor = vec4(0.2,1.0,0.2,1.0);
	}
}